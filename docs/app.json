[{"name":"app.R","content":"# app.R\n\n# install.packages(c(\"shiny\", \"ggplot2\", \"dplyr\", \"plotly\", \"tidyr\", \"readr\", \"RColorBrewer\", \"scales\", \"ggtext\", \"jsonlite\", \"Matrix\"))\nlibrary(shiny)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(plotly) # For interactive plots and hover effects\nlibrary(RColorBrewer) # Added for better multi-country chart colors\nlibrary(scales) # Added for axis formatting\nlibrary(ggtext)\nlibrary(readr) # Use readr for direct URL reading\nlibrary(jsonlite)\nlibrary(Matrix)\n\n# --- 1. Create the dataframe ---\n\ndf <- readRDS(\"gdbclusterswgi.rds\")\n\n# Combine lists\nall_countries <- sort(unique(df$country)) # Ensure countries are sorted\nall_countrycodes <- sort(unique(df$countrycode))\n\n\n# Generate random values for gdb and all variables (0-100)\ngdb_vars <- c(\"gdb_cc\", \"gdb_ci\", \"gdb_ea\", \"gdb_gf\", \"gdb_lm\", \"gdb_pf\", \"gdb_pi\", \"gdb_pp\")\nall_vars <- c(\"all_cc\", \"all_ci\", \"all_ea\", \"all_gf\", \"all_lm\", \"all_pf\", \"all_pi\", \"all_pp\")\nwgi_vars <- c(\"wgi_cc\", \"wgi_ge\", \"wgi_pv\", \"wgi_rl\", \"wgi_rq\", \"wgi_va\")\n\n\n# --- 2. Define UI for Shiny dashboard ---\nui <- fluidPage(\n  # Add a title to the dashboard\n  titlePanel(\n    h1(\"Country benchmarking tool of the Global Data Barometer 2nd Edition data\", align = \"left\", style = \"color: #2c3e50; font-weight: bold; padding-bottom: 20px;\")\n  ),\n  \n  # Layout with 3 columns\n  fluidRow(\n    # First column for controls (20% width)\n    column(2,\n           style = \"background-color: #f8f9fa; padding: 20px; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);\",\n           h3(\"Adjust controls to load charts â†“\", style = \"color: #34495e; font-weight: bold; margin-bottom: 20px;\"),\n           hr(), # Horizontal line for separation\n           h4(\"Dashboard Controls\", style = \"color: #34495e; margin-bottom: 20px;\"),\n           selectInput(\"selected_country\",\n                       label = \"Select country:\",\n                       choices = all_countries,\n                       selected = all_countries[1]\n           ),\n           selectInput(\"comparison_country\",\n                       label = \"Select comparison country:\",\n                       choices = all_countries,\n                       selected = all_countries[1]\n           ),\n           selectInput(\"selected_gdb_cluster\",\n                       label = \"Select cluster:\",\n                       choices = c(\n                         \"Critical Competences\" = \"gdb_cc\",\n                         \"Company Information\" = \"gdb_ci\",\n                         \"Equitable Access\" = \"gdb_ea\",\n                         \"Governance Foundation\" = \"gdb_gf\",\n                         \"Land Management\" = \"gdb_lm\",\n                         \"Public Finance\" = \"gdb_pf\",\n                         \"Political Integrity\" = \"gdb_pi\",\n                         \"Public Procurement\" = \"gdb_pp\"\n                       ),\n                       selected = \"gdb_cc\"\n           ),\n           selectInput(\"selected_wgi_indicator\",\n                       label = \"Select Worldwide Governance Indicator:\",\n                       choices = c(\n                         \"Control of Corruption\" = \"wgi_cc\",\n                         \"Government Effectiveness\" = \"wgi_ge\",\n                         \"Political Stability and Absence of Violence\" = \"wgi_pv\",\n                         \"Rule of Law\" = \"wgi_rl\",\n                         \"Regulatory Quality\" = \"wgi_rq\",\n                         \"Voice and Accountability\" = \"wgi_va\"\n                       ),\n                       selected = \"wgi_ge\"\n           ),\n           hr(), # Horizontal line for separation\n           div(\n            h5(\"Sources:\", style = \"color: #34495e;\"),\n             tags$ul(\n               tags$li(tags$a(href = \"https://globaldatabarometer.org/\", \"The Global Data Barometer 2nd Edition\", target = \"_blank\")),\n               tags$li(tags$a(href = \"https://www.worldbank.org/en/publication/worldwide-governance-indicators\", \"Worldwide Governance Indicators, 2024 Update, World Bank\", target = \"_blank\"))\n             )\n           ),\n           hr(), # Horizontal line for separation\n           div(\n             h5(\"Metadata:\", style = \"color: #34495e;\"),\n             tags$ul(\n               tags$li(tags$a(href = \"https://github.com/alexis-ribal/globaldatabarometer/\", \"Notes\", target = \"_blank\")),\n               tags$li(tags$a(href = \"https://alexis-ribal.github.io/\", \"Author\", target = \"_blank\"))\n             )\n           )\n    ),\n    \n    # Second column for Quadrants A and B (40% width)\n    column(5,\n           # Quadrant A\n           div(\n             style = \"background-color: #ffffff; padding: 20px; margin-bottom: 20px; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); height: 450px;\",\n             plotlyOutput(\"quadrantA_chart\", height = \"100%\") # Set height to 100%\n           ),\n           # Quadrant B\n           div(\n             style = \"background-color: #ffffff; padding: 20px; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); height: 450px;\",\n             plotlyOutput(\"quadrantB_chart\", height = \"100%\") # Set height to 100%\n           )\n    ),\n    \n    # Third column for Quadrants C and D (40% width)\n    column(5,\n           # Quadrant C\n           div(\n             style = \"background-color: #ffffff; padding: 20px; margin-bottom: 20px; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); height: 450px;\",\n             plotlyOutput(\"quadrantC_chart\", height = \"100%\") # Set height to 100%\n           ),\n           # Quadrant D\n           div(\n             style = \"background-color: #ffffff; padding: 20px; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); height: 450px;\",\n             plotlyOutput(\"quadrantD_chart\", height = \"100%\") # Set height to 100%\n           )\n    )\n  ),\n  # Custom CSS for better aesthetics and responsiveness\n  tags$head(\n    tags$style(HTML(\"\n      body {\n        font-family: 'Inter', sans-serif;\n        background-color: #ecf0f1;\n        color: #34495e;\n      }\n      .container-fluid {\n        padding: 30px;\n      }\n      .col-sm-2, .col-sm-5 {\n        padding: 15px;\n      }\n      .shiny-input-container {\n        margin-bottom: 15px;\n      }\n      .selectize-input {\n        border-radius: 5px;\n        border: 1px solid #ccc;\n      }\n      .selectize-dropdown {\n        border-radius: 5px;\n      }\n      h1, h4, h5 {\n        margin-top: 0;\n      }\n      /* Ensure plot legends and titles are responsive */\n      .plotly .legend .text {\n        font-size: 0.8em !important; /* Adjust as needed */\n      }\n      .plotly .gtitle {\n        font-size: 1.2em !important; /* Adjust as needed */\n      }\n      @media (max-width: 768px) {\n        .col-sm-2, .col-sm-5 {\n          width: 100%;\n        }\n        .container-fluid {\n          padding: 15px;\n        }\n      }\n    \"))\n  )\n)\n\n# --- 3. Define server logic ---\nserver <- function(input, output, session) {\n  \n  # Update choices for comparison country to exclude selected country\n  observe({\n    current_selected_country <- input$selected_country\n    # Filter out the currently selected country from the comparison list\n    available_comparison_countries <- all_countries[all_countries != current_selected_country]\n    updateSelectInput(session, \"comparison_country\",\n                      choices = available_comparison_countries,\n                      selected = if (input$comparison_country %in% available_comparison_countries) input$comparison_country else available_comparison_countries[1] # Keep selection if available, else set first\n    )\n  })\n  \n  # Reactive expression for the main selected country's data\n  selected_country_data <- reactive({\n    req(input$selected_country)\n    df %>% filter(country == input$selected_country)\n  })\n  \n  # Reactive expression for the comparison country's data\n  comparison_country_data <- reactive({\n    req(input$comparison_country)\n    df %>% filter(country == input$comparison_country)\n  })\n  \n  # Reactive expression for GDB cluster full name\n  gdb_cluster_name <- reactive({\n    switch(input$selected_gdb_cluster,\n           \"gdb_cc\" = \"Critical Competences\",\n           \"gdb_ci\" = \"Company Information\",\n           \"gdb_ea\" = \"Equitable Access\",\n           \"gdb_gf\" = \"Governance Foundation\",\n           \"gdb_lm\" = \"Land Management\",\n           \"gdb_pf\" = \"Public Finance\",\n           \"gdb_pi\" = \"Political Integrity\",\n           \"gdb_pp\" = \"Public Procurement\",\n           \"Unknown Cluster\"\n    )\n  })\n  \n  # Reactive expression for WGI indicator full name\n  wgi_indicator_name <- reactive({\n    switch(input$selected_wgi_indicator,\n           \"wgi_cc\" = \"Control of Corruption\",\n           \"wgi_ge\" = \"Government Effectiveness\",\n           \"wgi_pv\" = \"Political Stability and Absence of Violence\",\n           \"wgi_rl\" = \"Rule of Law\",\n           \"wgi_rq\" = \"Regulatory Quality\",\n           \"wgi_va\" = \"Voice and Accountability\",\n           \"Unknown Indicator\"\n    )\n  })\n  \n  # --- Quadrant A: How X scores against the world? ---\n  output$quadrantA_chart <- renderPlotly({\n    req(selected_country_data())\n    data_qA <- selected_country_data() %>%\n      select(all_of(gdb_vars), all_of(all_vars)) %>%\n      pivot_longer(\n        cols = starts_with(\"gdb_\") | starts_with(\"all_\"),\n        names_to = c(\".value\", \"category\"),\n        names_pattern = \"(gdb|all)_(.*)\"\n      ) %>%\n      mutate(\n        deviation = gdb - all,\n        category_label = case_when(\n          category == \"cc\" ~ \"Critical Competences\",\n          category == \"ci\" ~ \"Company Information\",\n          category == \"ea\" ~ \"Equitable Access\",\n          category == \"gf\" ~ \"Governance Foundation\",\n          category == \"lm\" ~ \"Land Management\",\n          category == \"pf\" ~ \"Public Finance\",\n          category == \"pi\" ~ \"Political Integrity\",\n          category == \"pp\" ~ \"Public Procurement\",\n          TRUE ~ category\n        )\n      ) %>%\n      arrange(deviation) # Order for better visualization\n    \n    p <- ggplot(data_qA, aes(x = deviation, y = reorder(category_label, deviation),\n                             text = paste(\"Category:\", category_label, \"\\nDeviation:\", round(deviation, 2),\n                                          \"\\nGDB Score:\", round(gdb, 2), \"\\nAll Score:\", round(all, 2)))) +\n      geom_bar(stat = \"identity\", aes(fill = deviation > 0)) +\n      scale_fill_manual(values = c(\"TRUE\" = \"#2ecc71\", \"FALSE\" = \"#e74c3c\")) +\n      labs(x = \"Points difference from the overall score (- / +)\", y = NULL, fill = \"Positive Deviation\") +\n      theme_minimal() +\n      theme(\n        legend.position = \"none\", # Removed legend\n        plot.title = element_text(size = rel(1.2)),\n        axis.text.y = element_text(size = rel(0.9)),\n        axis.title.x = element_text(size = rel(0.9))\n      )\n    \n    ggplotly(p, tooltip = \"text\") %>%\n      layout(\n        title = list(text = paste(\"Panel A: How does\", input$selected_country, \"score against overall scores?\"), font = list(size = 14)), # Title is handled by renderText\n        margin = list(t = 80) # Add top margin for blank space above title\n      )\n  })\n  \n  # --- Quadrant B: How X scores in Y? (Density Plot) ---\n  output$quadrantB_chart <- renderPlotly({\n    req(input$selected_gdb_cluster, selected_country_data())\n    \n    selected_gdb_col <- input$selected_gdb_cluster\n    country_score <- selected_country_data()[[selected_gdb_col]]\n    \n    # Create a temporary dataframe for plotting with tooltip text\n    plot_data_qB <- df %>%\n      mutate(\n        tooltip_text = paste0(\"Country: \", country,\n                              \"\\n\", gdb_cluster_name(), \": \", round(.data[[selected_gdb_col]], 2))\n      )\n    \n    p <- ggplot(plot_data_qB, aes_string(x = selected_gdb_col)) +\n      geom_density(fill = \"#3498db\", alpha = 0.6) +\n      # Add invisible points for tooltips, mapping the pre-calculated text\n      geom_point(aes(y = 0, text = tooltip_text), alpha = 0, size = 0.1) + # y=0 to place them on the axis\n      geom_vline(xintercept = country_score, color = \"#e74c3c\", linetype = \"dashed\", size = 1) +\n      labs(x = paste(gdb_cluster_name(), \"score\"), y = \"Density\") +\n      xlim(0, 100) + # Ensure x-axis is always 0-100\n      theme_minimal() +\n      theme(\n        legend.position = \"bottom\",\n        plot.title = element_text(size = rel(1.2)),\n        axis.title.x = element_text(size = rel(0.9)),\n        axis.title.y = element_text(size = rel(0.9)),\n        legend.text = element_text(size = rel(0.8))\n      )\n    \n    ggplotly(p, tooltip = \"text\") %>%\n      layout(\n        title = list(text = paste0(\"Panel B: How does \", input$selected_country, \" score in \", gdb_cluster_name(), \"?\"), font = list(size = 14)), # Title is handled by renderText\n        annotations = list(\n          x = country_score, y = 0, # Position of the annotation\n          text = paste0(input$selected_country,\": \", round(country_score, 2)),\n          xref = \"x\", yref = \"paper\", showarrow = TRUE, arrowhead = 7, ax = 0, ay = -40,\n          font = list(color = \"#e74c3c\", size = 10)\n        ),\n        margin = list(t = 80) # Add top margin for blank space above title\n      )\n  })\n  \n  # --- Quadrant C: How X compares with Z? (Scatterplot GDB variables) ---\n  output$quadrantC_chart <- renderPlotly({\n    req(selected_country_data(), comparison_country_data())\n    \n    main_country_data <- selected_country_data() %>%\n      select(all_of(gdb_vars)) %>%\n      pivot_longer(\n        cols = starts_with(\"gdb_\"),\n        names_to = \"variable\",\n        values_to = \"main_score\"\n      )\n    \n    comp_country_data <- comparison_country_data() %>%\n      select(all_of(gdb_vars)) %>%\n      pivot_longer(\n        cols = starts_with(\"gdb_\"),\n        names_to = \"variable\",\n        values_to = \"comp_score\"\n      )\n    \n    plot_data_qC <- inner_join(main_country_data, comp_country_data, by = \"variable\") %>%\n      mutate(\n        variable_label = case_when(\n          variable == \"gdb_cc\" ~ \"Critical Competences\",\n          variable == \"gdb_ci\" ~ \"Company Information\",\n          variable == \"gdb_ea\" ~ \"Equitable Access\",\n          variable == \"gdb_gf\" ~ \"Governance Foundation\",\n          variable == \"gdb_lm\" ~ \"Land Management\",\n          variable == \"gdb_pf\" ~ \"Public Finance\",\n          variable == \"gdb_pi\" ~ \"Political Integrity\",\n          variable == \"gdb_pp\" ~ \"Public Procurement\",\n          TRUE ~ variable\n        ),\n        # Use variable_label for the geom_text label\n        label_text = variable_label,\n        # Determine if point is above or below 45-degree line\n        position_relative_to_line = ifelse(main_score > comp_score, \"Above Line\", \"Below Line\")\n      )\n    \n    p <- ggplot(plot_data_qC, aes(x = main_score, y = comp_score,\n                                  text = paste(\"Category:\", variable_label, # Tooltip still uses variable_label\n                                               \"\\n\", input$selected_country, \"Score:\", round(main_score, 2),\n                                               \"\\n\", input$comparison_country, \"Score:\", round(comp_score, 2)),\n                                  color = position_relative_to_line)) + # Color based on position\n      geom_point(size = 3, alpha = 0.8) +\n      geom_text(aes(label = label_text), nudge_x = 3, nudge_y = 3, size = 3, color = \"#555555\") + # Add labels\n      geom_abline(intercept = 0, slope = 1, linetype = \"dashed\", color = \"gray\") + # 45-degree line\n      scale_color_manual(values = c(\"Above Line\" = \"#2ecc71\", \"Below Line\" = \"#e74c3c\")) + # Custom colors\n      labs(x = paste(input$selected_country, \"GDB Score\"),\n           y = paste(input$comparison_country, \"GDB Score\"),\n           color = \"Position relative to 45Â° line\") + # Legend title\n      xlim(0, 100) +\n      ylim(0, 100) +\n      theme_minimal() +\n      theme(\n        legend.position = \"none\", # Removed legend\n        plot.title = element_text(size = rel(1.2)),\n        axis.title.x = element_text(size = rel(0.9)),\n        axis.title.y = element_text(size = rel(0.9))\n      )\n    \n    # For plotly, geom_text labels usually don't get tooltips unless explicitly mapped in aes and included in tooltip\n    # We only want tooltips for the points, which is handled by 'text' aesthetic in geom_point.\n    ggplotly(p, tooltip = \"text\") %>%\n      layout(\n        title = list(text = paste0(\"Panel C: How does \", input$selected_country, \" compare with \", input$comparison_country, \"?\"), font = list(size = 14)), # Title is handled by renderText\n        margin = list(t = 80) # Add top margin for blank space above title\n      )\n  })\n  \n  # --- Quadrant D: How X scores compare to WGI (Scatterplot GDB vs WGI) ---\n  output$quadrantD_chart <- renderPlotly({\n    req(input$selected_gdb_cluster, input$selected_wgi_indicator, selected_country_data())\n    \n    selected_gdb_col <- input$selected_gdb_cluster\n    selected_wgi_col <- input$selected_wgi_indicator\n    \n    plot_data_qD <- df %>%\n      mutate(\n        is_selected = (country == input$selected_country),\n        tooltip_text = paste0(\"Country: \", country,\n                              \"\\n\", gdb_cluster_name(), \": \", round(.data[[selected_gdb_col]], 2),\n                              \"\\n\", wgi_indicator_name(), \": \", round(.data[[selected_wgi_col]], 2)),\n        # Create a label for the selected country only, directly using the country name\n        country_label = ifelse(is_selected, country, NA)\n      )\n    \n    p <- ggplot(plot_data_qD, aes_string(x = selected_gdb_col, y = selected_wgi_col,\n                                         color = \"is_selected\",\n                                         text = \"tooltip_text\")) + # Use the new tooltip_text column\n      geom_point(size = 3, alpha = 0.8) +\n      # Add label for the selected country, using the 'country_label' which is the country name\n      geom_text(aes(label = country_label), nudge_x = 0.5, nudge_y = 0.5, size = 3, color = \"#e74c3c\") +\n      scale_color_manual(values = c(\"TRUE\" = \"#e74c3c\", \"FALSE\" = \"#3498db\"),\n                         labels = c(\"TRUE\" = \"Selected Country\", \"FALSE\" = \"Other Countries\")) +\n      labs(x = paste(gdb_cluster_name(),\"score\"), y = paste(wgi_indicator_name(),\"score\"), color = \"Country Type\") +\n      xlim(0, 100) + # GDB axis\n      ylim(-2, 2) + # WGI axis\n      theme_minimal() +\n      theme(\n        legend.position = \"none\", # Removed legend\n        plot.title = element_text(size = rel(1.2)),\n        axis.title.x = element_text(size = rel(0.9)),\n        axis.title.y = element_text(size = rel(0.9))\n      )\n    \n    ggplotly(p, tooltip = \"text\") %>%\n      layout(\n        title = list(text = paste0(\"Panel D: How does \", input$selected_country, \" GDB scores compare to WGI scores?\"), font = list(size = 14)), # Title is handled by renderText\n        margin = list(t = 80) # Add top margin for blank space above title\n      )\n  })\n}\n\n# Run the application\nshinyApp(ui = ui, server = server)","type":"text"},{"name":"gdbclusterswgi.rds","content":"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\nle5qqkf8X0eETj/SLQAA","type":"binary"}]
