[{"name":"app.R","content":"# app.R\n\n# install.packages(c(\"shiny\", \"ggplot2\", \"dplyr\", \"plotly\", \"tidyr\", \"readr\", \"RColorBrewer\", \"scales\", \"ggtext\", \"jsonlite\", \"Matrix\"))\nlibrary(shiny)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(plotly) # For interactive plots and hover effects\nlibrary(RColorBrewer) # Added for better multi-country chart colors\nlibrary(scales) # Added for axis formatting\nlibrary(ggtext)\nlibrary(readr) # Use readr for direct URL reading\nlibrary(jsonlite)\nlibrary(Matrix)\n\n# --- 1. Create the dataframe ---\n\ndf <- readRDS(\"gdbclusterswgi.rds\")\n\n# Combine lists\nall_countries <- sort(unique(df$country)) # Ensure countries are sorted\nall_countrycodes <- sort(unique(df$countrycode))\n\n\n# Generate random values for gdb and all variables (0-100)\ngdb_vars <- c(\"gdb_cc\", \"gdb_ci\", \"gdb_ea\", \"gdb_gf\", \"gdb_lm\", \"gdb_pf\", \"gdb_pi\", \"gdb_pp\")\nall_vars <- c(\"all_cc\", \"all_ci\", \"all_ea\", \"all_gf\", \"all_lm\", \"all_pf\", \"all_pi\", \"all_pp\")\nwgi_vars <- c(\"wgi_cc\", \"wgi_ge\", \"wgi_pv\", \"wgi_rl\", \"wgi_rq\", \"wgi_va\")\n\n\n# --- 2. Define UI for Shiny dashboard ---\nui <- fluidPage(\n  # Add a title to the dashboard\n  titlePanel(\n    h1(\"Country benchmarking tool of the Global Data Barometer 2nd Edition data\", align = \"left\", style = \"color: #2c3e50; font-weight: bold; padding-bottom: 20px;\")\n  ),\n  \n  # Layout with 3 columns\n  fluidRow(\n    # First column for controls (20% width)\n    column(2,\n           style = \"background-color: #f8f9fa; padding: 20px; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);\",\n           h4(\"Dashboard Controls\", style = \"color: #34495e; margin-bottom: 20px;\"),\n           selectInput(\"selected_country\",\n                       label = \"Select country:\",\n                       choices = all_countries,\n                       selected = all_countries[1]\n           ),\n           selectInput(\"comparison_country\",\n                       label = \"Select comparison country:\",\n                       choices = all_countries,\n                       selected = all_countries[1]\n           ),\n           selectInput(\"selected_gdb_cluster\",\n                       label = \"Select cluster:\",\n                       choices = c(\n                         \"Critical Competences\" = \"gdb_cc\",\n                         \"Company Information\" = \"gdb_ci\",\n                         \"Equitable Access\" = \"gdb_ea\",\n                         \"Governance Foundation\" = \"gdb_gf\",\n                         \"Land Management\" = \"gdb_lm\",\n                         \"Public Finance\" = \"gdb_pf\",\n                         \"Political Integrity\" = \"gdb_pi\",\n                         \"Public Procurement\" = \"gdb_pp\"\n                       ),\n                       selected = \"gdb_cc\"\n           ),\n           selectInput(\"selected_wgi_indicator\",\n                       label = \"Select Worldwide Governance Indicator:\",\n                       choices = c(\n                         \"Control of Corruption\" = \"wgi_cc\",\n                         \"Government Effectiveness\" = \"wgi_ge\",\n                         \"Political Stability and Absence of Violence\" = \"wgi_pv\",\n                         \"Rule of Law\" = \"wgi_rl\",\n                         \"Regulatory Quality\" = \"wgi_rq\",\n                         \"Voice and Accountability\" = \"wgi_va\"\n                       ),\n                       selected = \"wgi_ge\"\n           ),\n           hr(), # Horizontal line for separation\n           div(\n            h5(\"Sources:\", style = \"color: #34495e;\"),\n             tags$ul(\n               tags$li(tags$a(href = \"https://globaldatabarometer.org/\", \"The Global Data Barometer 2nd Edition\", target = \"_blank\")),\n               tags$li(tags$a(href = \"https://www.worldbank.org/en/publication/worldwide-governance-indicators\", \"Worldwide Governance Indicators, 2024 Update, World Bank\", target = \"_blank\"))\n             )\n           ),\n           hr(), # Horizontal line for separation\n           div(\n             h5(\"Metadata:\", style = \"color: #34495e;\"),\n             tags$ul(\n               tags$li(tags$a(href = \"https://github.com/alexis-ribal/globaldatabarometer/\", \"Notes\", target = \"_blank\")),\n               tags$li(tags$a(href = \"https://alexis-ribal.github.io/\", \"Author\", target = \"_blank\"))\n             )\n           )\n    ),\n    \n    # Second column for Quadrants A and B (40% width)\n    column(5,\n           # Quadrant A\n           div(\n             style = \"background-color: #ffffff; padding: 20px; margin-bottom: 20px; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); height: 450px;\",\n             plotlyOutput(\"quadrantA_chart\", height = \"100%\") # Set height to 100%\n           ),\n           # Quadrant B\n           div(\n             style = \"background-color: #ffffff; padding: 20px; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); height: 450px;\",\n             plotlyOutput(\"quadrantB_chart\", height = \"100%\") # Set height to 100%\n           )\n    ),\n    \n    # Third column for Quadrants C and D (40% width)\n    column(5,\n           # Quadrant C\n           div(\n             style = \"background-color: #ffffff; padding: 20px; margin-bottom: 20px; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); height: 450px;\",\n             plotlyOutput(\"quadrantC_chart\", height = \"100%\") # Set height to 100%\n           ),\n           # Quadrant D\n           div(\n             style = \"background-color: #ffffff; padding: 20px; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); height: 450px;\",\n             plotlyOutput(\"quadrantD_chart\", height = \"100%\") # Set height to 100%\n           )\n    )\n  ),\n  # Custom CSS for better aesthetics and responsiveness\n  tags$head(\n    tags$style(HTML(\"\n      body {\n        font-family: 'Inter', sans-serif;\n        background-color: #ecf0f1;\n        color: #34495e;\n      }\n      .container-fluid {\n        padding: 30px;\n      }\n      .col-sm-2, .col-sm-5 {\n        padding: 15px;\n      }\n      .shiny-input-container {\n        margin-bottom: 15px;\n      }\n      .selectize-input {\n        border-radius: 5px;\n        border: 1px solid #ccc;\n      }\n      .selectize-dropdown {\n        border-radius: 5px;\n      }\n      h1, h4, h5 {\n        margin-top: 0;\n      }\n      /* Ensure plot legends and titles are responsive */\n      .plotly .legend .text {\n        font-size: 0.8em !important; /* Adjust as needed */\n      }\n      .plotly .gtitle {\n        font-size: 1.2em !important; /* Adjust as needed */\n      }\n      @media (max-width: 768px) {\n        .col-sm-2, .col-sm-5 {\n          width: 100%;\n        }\n        .container-fluid {\n          padding: 15px;\n        }\n      }\n    \"))\n  )\n)\n\n# --- 3. Define server logic ---\nserver <- function(input, output, session) {\n  \n  # Update choices for comparison country to exclude selected country\n  observe({\n    current_selected_country <- input$selected_country\n    # Filter out the currently selected country from the comparison list\n    available_comparison_countries <- all_countries[all_countries != current_selected_country]\n    updateSelectInput(session, \"comparison_country\",\n                      choices = available_comparison_countries,\n                      selected = if (input$comparison_country %in% available_comparison_countries) input$comparison_country else available_comparison_countries[1] # Keep selection if available, else set first\n    )\n  })\n  \n  # Reactive expression for the main selected country's data\n  selected_country_data <- reactive({\n    req(input$selected_country)\n    df %>% filter(country == input$selected_country)\n  })\n  \n  # Reactive expression for the comparison country's data\n  comparison_country_data <- reactive({\n    req(input$comparison_country)\n    df %>% filter(country == input$comparison_country)\n  })\n  \n  # Reactive expression for GDB cluster full name\n  gdb_cluster_name <- reactive({\n    switch(input$selected_gdb_cluster,\n           \"gdb_cc\" = \"Critical Competences\",\n           \"gdb_ci\" = \"Company Information\",\n           \"gdb_ea\" = \"Equitable Access\",\n           \"gdb_gf\" = \"Governance Foundation\",\n           \"gdb_lm\" = \"Land Management\",\n           \"gdb_pf\" = \"Public Finance\",\n           \"gdb_pi\" = \"Political Integrity\",\n           \"gdb_pp\" = \"Public Procurement\",\n           \"Unknown Cluster\"\n    )\n  })\n  \n  # Reactive expression for WGI indicator full name\n  wgi_indicator_name <- reactive({\n    switch(input$selected_wgi_indicator,\n           \"wgi_cc\" = \"Control of Corruption\",\n           \"wgi_ge\" = \"Government Effectiveness\",\n           \"wgi_pv\" = \"Political Stability and Absence of Violence\",\n           \"wgi_rl\" = \"Rule of Law\",\n           \"wgi_rq\" = \"Regulatory Quality\",\n           \"wgi_va\" = \"Voice and Accountability\",\n           \"Unknown Indicator\"\n    )\n  })\n  \n  # --- Quadrant A: How X scores against the world? ---\n  output$quadrantA_chart <- renderPlotly({\n    req(selected_country_data())\n    data_qA <- selected_country_data() %>%\n      select(all_of(gdb_vars), all_of(all_vars)) %>%\n      pivot_longer(\n        cols = starts_with(\"gdb_\") | starts_with(\"all_\"),\n        names_to = c(\".value\", \"category\"),\n        names_pattern = \"(gdb|all)_(.*)\"\n      ) %>%\n      mutate(\n        deviation = gdb - all,\n        category_label = case_when(\n          category == \"cc\" ~ \"Critical Competences\",\n          category == \"ci\" ~ \"Company Information\",\n          category == \"ea\" ~ \"Equitable Access\",\n          category == \"gf\" ~ \"Governance Foundation\",\n          category == \"lm\" ~ \"Land Management\",\n          category == \"pf\" ~ \"Public Finance\",\n          category == \"pi\" ~ \"Political Integrity\",\n          category == \"pp\" ~ \"Public Procurement\",\n          TRUE ~ category\n        )\n      ) %>%\n      arrange(deviation) # Order for better visualization\n    \n    p <- ggplot(data_qA, aes(x = deviation, y = reorder(category_label, deviation),\n                             text = paste(\"Category:\", category_label, \"\\nDeviation:\", round(deviation, 2),\n                                          \"\\nGDB Score:\", round(gdb, 2), \"\\nAll Score:\", round(all, 2)))) +\n      geom_bar(stat = \"identity\", aes(fill = deviation > 0)) +\n      scale_fill_manual(values = c(\"TRUE\" = \"#2ecc71\", \"FALSE\" = \"#e74c3c\")) +\n      labs(x = \"Points difference from the overall score (- / +)\", y = NULL, fill = \"Positive Deviation\") +\n      theme_minimal() +\n      theme(\n        legend.position = \"none\", # Removed legend\n        plot.title = element_text(size = rel(1.2)),\n        axis.text.y = element_text(size = rel(0.9)),\n        axis.title.x = element_text(size = rel(0.9))\n      )\n    \n    ggplotly(p, tooltip = \"text\") %>%\n      layout(\n        title = list(text = paste(\"Panel A: How\", input$selected_country, \"scores against overall scores?\"), font = list(size = 14)), # Title is handled by renderText\n        margin = list(t = 80) # Add top margin for blank space above title\n      )\n  })\n  \n  # --- Quadrant B: How X scores in Y? (Density Plot) ---\n  output$quadrantB_chart <- renderPlotly({\n    req(input$selected_gdb_cluster, selected_country_data())\n    \n    selected_gdb_col <- input$selected_gdb_cluster\n    country_score <- selected_country_data()[[selected_gdb_col]]\n    \n    # Create a temporary dataframe for plotting with tooltip text\n    plot_data_qB <- df %>%\n      mutate(\n        tooltip_text = paste0(\"Country: \", country,\n                              \"\\n\", gdb_cluster_name(), \": \", round(.data[[selected_gdb_col]], 2))\n      )\n    \n    p <- ggplot(plot_data_qB, aes_string(x = selected_gdb_col)) +\n      geom_density(fill = \"#3498db\", alpha = 0.6) +\n      # Add invisible points for tooltips, mapping the pre-calculated text\n      geom_point(aes(y = 0, text = tooltip_text), alpha = 0, size = 0.1) + # y=0 to place them on the axis\n      geom_vline(xintercept = country_score, color = \"#e74c3c\", linetype = \"dashed\", size = 1) +\n      labs(x = paste(gdb_cluster_name(), \"score\"), y = \"Density\") +\n      xlim(0, 100) + # Ensure x-axis is always 0-100\n      theme_minimal() +\n      theme(\n        legend.position = \"bottom\",\n        plot.title = element_text(size = rel(1.2)),\n        axis.title.x = element_text(size = rel(0.9)),\n        axis.title.y = element_text(size = rel(0.9)),\n        legend.text = element_text(size = rel(0.8))\n      )\n    \n    ggplotly(p, tooltip = \"text\") %>%\n      layout(\n        title = list(text = paste0(\"Panel B: How \", input$selected_country, \" scores in \", gdb_cluster_name(), \"?\"), font = list(size = 14)), # Title is handled by renderText\n        annotations = list(\n          x = country_score, y = 0, # Position of the annotation\n          text = paste0(input$selected_country,\": \", round(country_score, 2)),\n          xref = \"x\", yref = \"paper\", showarrow = TRUE, arrowhead = 7, ax = 0, ay = -40,\n          font = list(color = \"#e74c3c\", size = 10)\n        ),\n        margin = list(t = 80) # Add top margin for blank space above title\n      )\n  })\n  \n  # --- Quadrant C: How X compares with Z? (Scatterplot GDB variables) ---\n  output$quadrantC_chart <- renderPlotly({\n    req(selected_country_data(), comparison_country_data())\n    \n    main_country_data <- selected_country_data() %>%\n      select(all_of(gdb_vars)) %>%\n      pivot_longer(\n        cols = starts_with(\"gdb_\"),\n        names_to = \"variable\",\n        values_to = \"main_score\"\n      )\n    \n    comp_country_data <- comparison_country_data() %>%\n      select(all_of(gdb_vars)) %>%\n      pivot_longer(\n        cols = starts_with(\"gdb_\"),\n        names_to = \"variable\",\n        values_to = \"comp_score\"\n      )\n    \n    plot_data_qC <- inner_join(main_country_data, comp_country_data, by = \"variable\") %>%\n      mutate(\n        variable_label = case_when(\n          variable == \"gdb_cc\" ~ \"Critical Competences\",\n          variable == \"gdb_ci\" ~ \"Company Information\",\n          variable == \"gdb_ea\" ~ \"Equitable Access\",\n          variable == \"gdb_gf\" ~ \"Governance Foundation\",\n          variable == \"gdb_lm\" ~ \"Land Management\",\n          variable == \"gdb_pf\" ~ \"Public Finance\",\n          variable == \"gdb_pi\" ~ \"Political Integrity\",\n          variable == \"gdb_pp\" ~ \"Public Procurement\",\n          TRUE ~ variable\n        ),\n        # Use variable_label for the geom_text label\n        label_text = variable_label,\n        # Determine if point is above or below 45-degree line\n        position_relative_to_line = ifelse(main_score > comp_score, \"Above Line\", \"Below Line\")\n      )\n    \n    p <- ggplot(plot_data_qC, aes(x = main_score, y = comp_score,\n                                  text = paste(\"Category:\", variable_label, # Tooltip still uses variable_label\n                                               \"\\n\", input$selected_country, \"Score:\", round(main_score, 2),\n                                               \"\\n\", input$comparison_country, \"Score:\", round(comp_score, 2)),\n                                  color = position_relative_to_line)) + # Color based on position\n      geom_point(size = 3, alpha = 0.8) +\n      geom_text(aes(label = label_text), nudge_x = 3, nudge_y = 3, size = 3, color = \"#555555\") + # Add labels\n      geom_abline(intercept = 0, slope = 1, linetype = \"dashed\", color = \"gray\") + # 45-degree line\n      scale_color_manual(values = c(\"Above Line\" = \"#2ecc71\", \"Below Line\" = \"#e74c3c\")) + # Custom colors\n      labs(x = paste(input$selected_country, \"GDB Score\"),\n           y = paste(input$comparison_country, \"GDB Score\"),\n           color = \"Position relative to 45° line\") + # Legend title\n      xlim(0, 100) +\n      ylim(0, 100) +\n      theme_minimal() +\n      theme(\n        legend.position = \"none\", # Removed legend\n        plot.title = element_text(size = rel(1.2)),\n        axis.title.x = element_text(size = rel(0.9)),\n        axis.title.y = element_text(size = rel(0.9))\n      )\n    \n    # For plotly, geom_text labels usually don't get tooltips unless explicitly mapped in aes and included in tooltip\n    # We only want tooltips for the points, which is handled by 'text' aesthetic in geom_point.\n    ggplotly(p, tooltip = \"text\") %>%\n      layout(\n        title = list(text = paste0(\"Panel C: How \", input$selected_country, \" compares with \", input$comparison_country, \"?\"), font = list(size = 14)), # Title is handled by renderText\n        margin = list(t = 80) # Add top margin for blank space above title\n      )\n  })\n  \n  # --- Quadrant D: How X scores compare to WGI (Scatterplot GDB vs WGI) ---\n  output$quadrantD_chart <- renderPlotly({\n    req(input$selected_gdb_cluster, input$selected_wgi_indicator, selected_country_data())\n    \n    selected_gdb_col <- input$selected_gdb_cluster\n    selected_wgi_col <- input$selected_wgi_indicator\n    \n    plot_data_qD <- df %>%\n      mutate(\n        is_selected = (country == input$selected_country),\n        tooltip_text = paste0(\"Country: \", country,\n                              \"\\n\", gdb_cluster_name(), \": \", round(.data[[selected_gdb_col]], 2),\n                              \"\\n\", wgi_indicator_name(), \": \", round(.data[[selected_wgi_col]], 2)),\n        # Create a label for the selected country only, directly using the country name\n        country_label = ifelse(is_selected, country, NA)\n      )\n    \n    p <- ggplot(plot_data_qD, aes_string(x = selected_gdb_col, y = selected_wgi_col,\n                                         color = \"is_selected\",\n                                         text = \"tooltip_text\")) + # Use the new tooltip_text column\n      geom_point(size = 3, alpha = 0.8) +\n      # Add label for the selected country, using the 'country_label' which is the country name\n      geom_text(aes(label = country_label), nudge_x = 0.5, nudge_y = 0.5, size = 3, color = \"#e74c3c\") +\n      scale_color_manual(values = c(\"TRUE\" = \"#e74c3c\", \"FALSE\" = \"#3498db\"),\n                         labels = c(\"TRUE\" = \"Selected Country\", \"FALSE\" = \"Other Countries\")) +\n      labs(x = paste(gdb_cluster_name(),\"score\"), y = paste(wgi_indicator_name(),\"score\"), color = \"Country Type\") +\n      xlim(0, 100) + # GDB axis\n      ylim(-2, 2) + # WGI axis\n      theme_minimal() +\n      theme(\n        legend.position = \"none\", # Removed legend\n        plot.title = element_text(size = rel(1.2)),\n        axis.title.x = element_text(size = rel(0.9)),\n        axis.title.y = element_text(size = rel(0.9))\n      )\n    \n    ggplotly(p, tooltip = \"text\") %>%\n      layout(\n        title = list(text = paste0(\"Panel D: How \", input$selected_country, \" GDB scores compare to WGI scores?\"), font = list(size = 14)), # Title is handled by renderText\n        margin = list(t = 80) # Add top margin for blank space above title\n      )\n  })\n}\n\n# Run the application\nshinyApp(ui = ui, server = server)","type":"text"},{"name":"epsilonmaslogo.png","content":"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\npjT8d33/04OJqrbgn/5fgMwGxV0ErrUAAACWZVhJZk1NACoAAAAIAAUBEgADAAAAAQABAAAB\nGgAFAAAAAQAAAEoBGwAFAAAAAQAAAFIBKAADAAAAAQACAACHaQAEAAAAAQAAAFoAAAAAAAAA\nkAAAAAEAAACQAAAAAQADkoYABwAAABIAAACEoAIABAAAAAEAAAD6oAMABAAAAAEAAADnAAAA\nAEFTQ0lJAAAAU2NyZWVuc2hvdLmExGsAAAAJcEhZcwAAFiUAABYlAUlSJPAAAALZaVRYdFhN\nTDpjb20uYWRvYmUueG1wAAAAAAA8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEv\nIiB4OnhtcHRrPSJYTVAgQ29yZSA2LjAuMCI+CiAgIDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0\ncDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+CiAgICAgIDxyZGY6\nRGVzY3JpcHRpb24gcmRmOmFib3V0PSIiCiAgICAgICAgICAgIHhtbG5zOmV4aWY9Imh0dHA6\nLy9ucy5hZG9iZS5jb20vZXhpZi8xLjAvIgogICAgICAgICAgICB4bWxuczp0aWZmPSJodHRw\nOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyI+CiAgICAgICAgIDxleGlmOlBpeGVsWERpbWVu\nc2lvbj4xMjAwPC9leGlmOlBpeGVsWERpbWVuc2lvbj4KICAgICAgICAgPGV4aWY6VXNlckNv\nbW1lbnQ+U2NyZWVuc2hvdDwvZXhpZjpVc2VyQ29tbWVudD4KICAgICAgICAgPGV4aWY6UGl4\nZWxZRGltZW5zaW9uPjExMDg8L2V4aWY6UGl4ZWxZRGltZW5zaW9uPgogICAgICAgICA8dGlm\nZjpSZXNvbHV0aW9uVW5pdD4yPC90aWZmOlJlc29sdXRpb25Vbml0PgogICAgICAgICA8dGlm\nZjpZUmVzb2x1dGlvbj4xNDQ8L3RpZmY6WVJlc29sdXRpb24+CiAgICAgICAgIDx0aWZmOlhS\nZXNvbHV0aW9uPjE0NDwvdGlmZjpYUmVzb2x1dGlvbj4KICAgICAgICAgPHRpZmY6T3JpZW50\nYXRpb24+MTwvdGlmZjpPcmllbnRhdGlvbj4KICAgICAgPC9yZGY6RGVzY3JpcHRpb24+CiAg\n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\nYII=","type":"binary"},{"name":"gdbclusterswgi.rds","content":"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\nle5qqkf8X0eETj/SLQAA","type":"binary"}]
